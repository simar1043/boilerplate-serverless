service: api-boilerplate

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    POSTGRES_HOST: ${file(./src/config/${self:provider.stage}.config.json):postgresHost}
    POSTGRES_PORT: ${file(./src/config/${self:provider.stage}.config.json):postgresPort}
    POSTGRES_USER: ${file(./src/config/${self:provider.stage}.config.json):postgresUser}
    POSTGRES_PASSWORD: ${file(./src/config/${self:provider.stage}.config.json):postgresPassword}
    POSTGRES_DB: ${file(./src/config/${self:provider.stage}.config.json):postgresDB}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude: ["aws-sdk"]
    target: "node20"
    define: { "require.resolve": undefined }
    platform: 'node'
    packager: 'npm'
    external: ['pg']
    concurrency: 10
  documentation:
    apiType: 'openapi_3'
    openapi: ${file(./src/docs/openapi.yml)}

plugins:
  - serverless-offline
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-openapi-documentation

package:
  patterns:
    - '!node_modules/.cache/**'
    - '!.git/**'
    - '!.env'
    - '!README.md'
  individually: true
  excludeDevDependencies: true

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false

    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess

functions:
  - ${file(./src/functions/functions.yml)} 